파일 > 폴더 열기...
    day02 생성 후 열기
summary.txt 생성

데이터 유형
4. 딕셔너리
    모든 원소 삭제 : 식별자.clear()

5. 집합(Set)
    순서 없음. 중복값 저장이 허용되지 않음.
    문법) 식별자 = {값1, 값2, 값3, ...}
          식별자 = set(시퀀스유형)
    시퀀스의 원소접근 방식([인덱스])을 사용할 수
    없음.(식별자[3] X)
    -> 개별 원소를 사용하려면 리스트나 튜플로 변형
     식별자 = list(집합) 또는 식별자 = tuple(집합)

    관련 함수
    1) 1개 추가 : add(v)
    2) 여러개 추가 : update([v1, v2, v3, ...])
    3) 원소 제거 : remove(v)

    집합연산
    1) 교집합 : '&'. 두 집합의 공통 원소 구하기
            집합1 & 집합2
            집합1.intersection(집합2)
    2) 합집합 : '|'. 두 집합의 모든 원소 구하기
            집합1 | 집합2
            집합1.union(집합2)
    3) 차집합 : '-'. 공통 원소를 뺀 선행 집합 원소
            집합1 - 집합2
            집합1.difference(집합2)

파이썬 연산자
1. 산술 연산자 : +, -, *, /, %, **, //
    / : 결과값은 실수. 5 / 2 => 2.5
    // : 결과로 몫을 구하는 연산자. 5 // 2 = 2
    ** : 제곱 2 ** 2 = 4
2. 할당(대입) 연산자 : =, += 등 모든 산술연산자
3. 비교 연산자 : ==, !=, >, <, >=, <=
4. 논리 연산자 : and, or, not
5. 항등 연산자(identity) - is, is not
    a is b, a is not b
    - 같은 메모리 주소인지 비교하는 연산자.
    파이썬의 데이터는 모두 객체화 하여 사용.
    x = 10 => x는 변수가 아니라 객체다.
6. 멤버 연산자 - in, not in
7. 비트 연산자 
    - &(and), |(or), ^(xor), ~(not), <<, >>
    data = bit 시퀀스 
    각 비트를 따로따로 연산에 활용(하드웨어 제어)

제어문 - if, while, for
  파이썬의 블록 구조
    파이썬은 '들여쓰기'로 블록의 범위를 지정한다.
    :(콜론) - 블록의 시작을 나타냄. 
              제어문 범위나 함수 정의에서 사용.

1. if
    기본형식)
    if 조건문:
        수행문장1
        수행문장2
        ...
    else:
        수행문장a
        수행문장b
        ...

    다중 조건을 처리하는 키워드 : elif
    형식)
    if 조건식1:
        수행문장...
    elif 조건식2:
        수행문장...
    elif 조건식3:
        수행문장...
    else:
        수행문장...

    else 블록이나 두번째 이후의 elif는 없을 수도
    있음.

    조건부 표현식
    변수 = 참인_경우의_값 if 조건식 else 거짓인_경우의_값

    다른 언어 처럼 중첩하여 사용할 수 있음
    if 조건식:
        if 하위조건식:
            수행문장...
        else:
            수행문장...
    else:
        수행문장 또는 if문장..