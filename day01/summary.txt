파이썬(Python)
  1991년에 발표된 인터프리터 방식의
  프로그래밍 언어.
  창시자는 귀도 반 로섬(Guido van Rossum)

기본 문법
1. 세미콜론(;) - 문장의 끝을 나타내는 기호.
  세미콜론을 붙이지 않는다.
  붙여도 상관없지만, 한 줄에 여러 문장을 
  작성할 경우 외에는 사용하지 않는다.
  a = 10; b = 20
2. 주석 - # (한줄, 블록 주석 구분 없음)
3. 들여쓰기(매우 중요!)
  제어문 블록이나 함수의 문장을 작성할 때
  반드시 들여쓰기를 해야 한다.
  자바 예) - 들여쓰기를 안해도 상관없음.
    for(int i = 0; i < 10; i++){
    println(i);
    println("hello");
    }
  파이썬 예)
    for i in range(10):
        print(i)
        print("hello")
  
  파이썬에서 들여쓰기 방법은 공백(스페이스)
  2칸, 4칸, 탭(tab - 8칸) 등 여러가지가 
  있음.
  파이썬 코딩 스타일 가이드(PEP 8)에서는
  4칸을 기본으로 규정하고 있음.
  PEP(Python Enhancement Proposals)

4. 코드블록
  들여쓰기를 기준으로 구성.
  단, 같은 블록은 들여쓰기 칸 수가 같아야
  하고, 공백과 탭 문자를 섞어 쓰면 안된다.
  for i in range(10):   -> X
    print(i)
      print("hello")
  즉, 같은 칸으로 들여쓰기를 해야 한다.

권장 코드 스타일
1. 작명 규칙
  일반적으로 스네이크케이스, 특정한 종류에는
  파스칼케이스를 권장함.
  스네이크케이스 : 패키지, 모듈, 함수, 변수
                  메소드.(in_num)
  파스칼케이스 : 클래스, 예외.(SomeClass)
  기타 : 상수는 대문자+밑줄.(MAX_LIMIT)
2. 문법 규칙
  1) 한 줄은 79글자로 제한.
  2) import는 파일의 맨 위에 작성하고,
    내장모듈, 제3자 모듈, 직접만든 모듈 
    순으로 작성.
  3) 인스턴스 메소드의 첫 인자는 self로,
    클래스 메소드의 첫 인자는 cls로 쓰기.
  4) 할당(대입) 연산자(=) 앞 뒤에 공백 넣기.
     x = 10

파이썬 코드 파일 : xxx.py

변수
  자바스크립트와 같이 자료형은 없음.
  할당되는 데이터에 따라 결정됨.
    type(변수) : 데이터의 유형을 알아내는 함수.
  
  문법) 
  1) 단일 변수 : 식별자 = 데이터
  2) 다수 변수 : 
    식별자1, 식별자2, 식별자3 = 값1, 값2, 값3
    - 변수의 개수와 값의 개수가 일치해야 함.
      나열된 순서대로 할당됨.
  3) 같은 값을 할당받는 다수 변수
    식별자1 = 식별자2 = 시별자3 = 값

  변수의 삭제 : del 식별자
  빈 변수 선언 : 식별자 = None
  (None은 다른 언어의 null과 같음)

데이터의 입출력
  1. 입력 - input() 함수
    변수에 입력값 저장 - 변수 = input()
    화면에 문장 출력 후 변수에 저장
    - 변수 = input('입력문구')

    입력값은 무조건 문자열이다!
    참고) 문자열 -> 정수 : int(str)
          문자열 -> 실수 : float(str)
    
    다수의 값을 한번에 받아서 여러 변수에
    저장(할당) - split('구분자')
    두변수에 저장 예)
      변수1, 변수2 = input().split()

    입력받은 다수의 문자열을 분할하여
    정수나 실수로 변환 - map(유형, input().split())

  2. 출력 - print() 함수
    값 또는 변수를 출력. ','로 구분하여 여러 값
    또는 여러 변수를 한번에 출력할 수 있음.
    예) print(1, 2, 3) => 1 2 3
        출력 사이 사이에 공백(' ') 출력.

    ● 출력 값 사이에 특정 값 지정 - sep
    예) print(1, 2, 3, sep='/') => 1/2/3
    sep 생략 시 자동으로 ' '(공백) 출력.
    sep에 ''를 지정하면 공백없이 출력.
    sep에 '\n'를 지정하면 줄바꿈하여 출력.

    ● 출력 끝부분에 대한 설정 - end
    print 함수는 기본값으로 출력 후 줄바꿈함.
    예) print(1, end='|')
        print(2)            => 1|2

데이터의 유형
1. 숫자형 - 정수(int), 실수(float).
2. bool - True/False 값. 비교/논리 연산의 결과.
3. 시퀀스 - 값이 연속적으로 이어진 형태(순서 있음)
  1) 문자열 - 문자의 나열. ', ", ''', """ 4가지 사용 가능.
        ''', """ - 여러줄의 문자열을 작성할 때 사용.
            예) '''첫번째 줄
                두번째 줄'''
        ', " - 한줄 문자열을 작성할 때 주로 사용.
        전체 문자열(A) 내에 ' 또는 "를 출력할 경우.
        A를 '로 묶고 내부에서 "를 사용.
        A를 "로 묶고 내부에서 '를 사용.
  2) 리스트 - 배열과 유사함. 원소의 변경, 추가, 삭제 가능.
        '['와 ']' 사용. 각 값은 ','로 구분하여 작성.
        데이터 유형에 상관 없이 저장 가능.
        문법)
          식별자 = [값1, 값2, 값3, 값4, ...]
          빈 리스트 : 식별자 = []
                     식별자 = list()
  3) 튜플 - 수정할 수 없는 배열. 원소의 변경, 추가, 삭제가
        불가능. 최초 생성 시 작성된 내용을 유지.
        '('와 ')' 사용. 각 값은 ','로 구분하여 작성.
        데이터 유형에 상관없이 저장 가능.
        문법)
          식별자 = (값1, 값2, 값3, ...)
          요소가 1개인 튜플 생성 : 식별자 = (값,)
          range 사용하여 생성 : 식별자 = tuple(range())
        튜플 -> 리스트 : list(tuple식별자)
        리스트 -> 튜플 : tuple(list식별자)

4. 딕셔너리 - Map과 유사(거의 동일). 
    key와 value의 쌍으로 저장.
    생성 문법)
        식별자 = {key1:value1, key2:value2, ...}
        인적정보, 제품정보 등 저장, 관리하기 위한 유형.
5. 집합 - 순서 없음, 중복이 허용되지 않음.

range(수치) 함수 : 범위 값 생성 함수. 0부터 수치-1까지
    값을 생성.
    a = list(range(5)) => [0, 1, 2, 3, 4]
    사용법
    range(strat, end) : start ~ (end - 1) 생성.
    range(start, end, step) : start부터 end - 1까지
                    step 간격으로 생성
        range(1, 10, 2) => 1, 3, 5, 7, 9 생성
    range(big, small, -step) : 큰수부터 역순으로 생성.
        range(10, 0, -1) => 10,9,8,7,6,5,4,3,2,1 생성.
    
    리스트나 튜플에서 사용할 값을 생성할 때 주로 사용.

자료구조(Data Structure)에서 데이터를 추가 -> push
데이터를 꺼내는 것 -> pop

슬라이스 : 일부 요소의 추출 및 변경
        추출 시에는 원본 유지됨.
    리스트[start:end] - start부터 end-1까지 추출
    리스트[start:end:step] - start부터 end-1까지
        step만큼 건너띄며 요소 추출
    리스트[:end] - 처음부터 end-1까지 추출
    리스트[start:] - start부터 끝까지 추출
    리스트[:] - 전체 추출 (= 리스트[::])
    리스트[:end:step], 리스트[start::step], 리스트[::step]

    리스트 슬라이스 후 값을 대입하면 추출된 원소 대신
    새로운 데이터를 삽입할 수 있음. 띄엄띄엄 교체도 가능.

시퀀스 형 공통 명령어
  in/not in : 원소의 존재 여부 확인.
            결과값은 bool 형.